<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="orne_gamma">  
  <pose>0.0 0.0 0.0 0.0 0.0 0.0</pose>

    <link name="base_footprint"/>

    <link name="base_link">

      <inertial>
        <pose>0 0 0 0 0 0</pose>
        <inertia>
          <ixx>0.25925</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.32216</iyy>
          <iyz>0</iyz>
          <izz>0.52516</izz>
        </inertia>
        <mass>15</mass>
      </inertial>

      <collision name="base_collision">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          <box>
            <size>0.485 0.43 0.15</size>
          </box>
        </geometry>
      </collision>

      <visual name="base_visual">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          <box>
            <size>0.485 0.43 0.15</size>
          </box>
        </geometry>
      </visual>
    </link>

    <!-- <link name="imu_link">
      <sensor name="tb3_imu" type="imu">
        <always_on>true</always_on>
        <update_rate>200</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="turtlebot3_imu" filename="libgazebo_ros_imu_sensor.so">
          <ros>
            <remapping>~/out:=imu</remapping>
          </ros>
        </plugin>
      </sensor>
    </link> -->

    <link name="hokuyo_link">    
      <inertial>
        <pose>0.25 0 0.1 0 0 0</pose>
        <inertia>
          <ixx>0.005</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.005</iyy>
          <iyz>0.000</iyz>
          <izz>0.005</izz>
        </inertia>
        <mass>0.2</mass>
      </inertial>

      <collision name="lidar_sensor_collision">
        <pose>0.25 0 0.1 0 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.001</radius>
            <length>0.001</length>
          </cylinder>
        </geometry>
      </collision>

      <visual name="lidar_sensor_visual">
        <pose>0.25 0 0.1 0 0 0</pose>
        <geometry>
          <box>
            <size>0.05 0.05 0.05</size>
          </box>
        </geometry>
      </visual>

      <sensor name="hls_lfcd_lds" type="ray">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <pose>0.25 0 0.1 0 0 0</pose>
        <update_rate>5</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>720</samples>
              <resolution>1.000000</resolution>
              <min_angle>-1.570796</min_angle>
              <max_angle>1.570796</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.1</min>
            <max>30.0</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="gamma_laserscan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>hokuyo_link</frame_name>
        </plugin>
      </sensor>
    </link>

    <link name="left_wheel">

      <material>Gazebo/Orange</material>

      <inertial>
        <!-- <pose>0 0 0 0 0 0</pose> -->
        <pose>-0.15 0.15 -0.05 -1.57 0 0</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.002</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>1</mass>
      </inertial>

      <collision name="left_wheel_collision">
        <!-- <pose>0.0 0.144 0.023 -1.57 0 0</pose> -->
        <pose>-0.15 0.15 -0.05 -1.57 0 0</pose>
        <!-- <pose>0 0 0 0 0 0</pose> -->
        <geometry>
          <cylinder>
            <radius>0.0725</radius>
            <length>0.03</length>
          </cylinder>
        </geometry>
        <surface>
          <!-- This friction pamareter don't contain reliable data!! -->
          <friction>
            <ode>
              <mu>1.0</mu>
              <mu2>1.0</mu2>
              <!-- <mu>100000</mu>
              <mu2>100000</mu2> -->
              <fdir1>0 0 0</fdir1>
              <slip1>0.0</slip1>
              <slip2>0.0</slip2>
            </ode>
          </friction>
          <contact>
            <ode>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <kp>1e+5</kp>
              <kd>100.0</kd>
              <!-- <kd>1</kd> -->
              <max_vel>0.1</max_vel>
              <min_depth>0.001</min_depth>
            </ode>
          </contact>
        </surface>
      </collision>

      <visual name="left_wheel_visual">
        <pose>-0.15 0.15 -0.05 -1.57 0 0</pose>
        <!-- <pose>0.0 0.144 0.023 0 0 0</pose> -->
        <!-- <pose>0 0 0 0 0 0</pose> -->
        <geometry>
          <cylinder>
            <radius>0.0725</radius>
            <length>0.03</length>
          </cylinder>
          <material>Gazebo/Orange</material>
        </geometry>
      </visual>
    </link>

    <link name="right_wheel">

      <inertial>
        <pose>-0.15 -0.15 -0.05 -1.57 0 0</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.002</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>1</mass>
      </inertial>
    
      <collision name="right_wheel_collision">
        <!-- <pose>0.0 0 0 -1.57 0 0</pose> -->
        <pose>-0.15 -0.15 -0.05 -1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.0725</radius>
            <length>0.03</length>
          </cylinder>
        </geometry>
        <surface>
          <!-- This friction pamareter don't contain reliable data!! -->
          <friction>
            <ode>
              <mu>1.0</mu>
              <mu2>1.0</mu2>
              <!-- <mu>100000</mu>
              <mu2>100000</mu2> -->
              <fdir1>0 0 0</fdir1>
              <slip1>0.0</slip1>
              <slip2>0.0</slip2>
            </ode>
          </friction>
          <contact>
            <ode>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <kp>1e+5</kp>
              <kd>100.0</kd>
              <!-- <kd>1</kd> -->
              <max_vel>0.1</max_vel>
              <min_depth>0.001</min_depth>
            </ode>
          </contact>
        </surface>
      </collision>

      <visual name="right_wheel_visual">
        <!-- <pose>0.0 -0.144 0.023 0 0 0</pose> -->
        <pose>-0.15 -0.15 -0.05 -1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.0725</radius>
            <length>0.03</length>
          </cylinder>
        </geometry>
      </visual>
    </link>

    <link name='caster_back_right_link'>
      <pose>0.15 -0.064 -0.082 -1.57 0 0</pose>
      <inertial>
        <mass>0.001</mass>
        <inertia>
          <ixx>0.00001</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.00001</iyy>
          <iyz>0.000</iyz>
          <izz>0.00001</izz>
        </inertia>
      </inertial>
      <collision name='collision'>
        <geometry>
          <sphere>
            <!-- <radius>0.0425</radius> -->
            <radius>0.04265</radius>
          </sphere>
        </geometry>
        <surface>
          <contact>
            <ode>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <kp>1e+5</kp>
              <kd>1</kd>
              <max_vel>0.01</max_vel>
              <min_depth>0.001</min_depth>
            </ode>
          </contact>
        </surface>
      </collision>
    </link>

    <link name='caster_back_left_link'>
      <pose>0.15 0.064 -0.082 -1.57 0 0</pose>
      <inertial>
        <mass>0.001</mass>
        <inertia>
          <ixx>0.00001</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.00001</iyy>
          <iyz>0.000</iyz>
          <izz>0.00001</izz>
        </inertia>
      </inertial>
      <collision name='collision'>
        <geometry>
          <sphere>
            <!-- <radius>0.0725</radius> -->
            <radius>0.04265</radius>
          </sphere>
        </geometry>
        <surface>
          <contact>
            <ode>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <kp>1e+5</kp>
              <kd>1</kd>
              <max_vel>0.01</max_vel>
              <min_depth>0.001</min_depth>
            </ode>
          </contact>
        </surface>
      </collision>
    </link>

    <link name="camera_link"/>

    <link name="camera_rgb_optical_frame">
      <inertial>
        <pose>0.076 0.0 0.093 0 0 0</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.001</iyy>
          <iyz>0.000</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>0.035</mass>
      </inertial>

      <pose>0.076 0.0 0.093 0 0 0</pose>
      <sensor name="camera" type="camera">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>30</update_rate>
        <camera name="picam">
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
              <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                  That pixel's noise value is added to each of its color
                  channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
          <plugin name="camera_driver" filename="libgazebo_ros_camera.so">
            <ros>
              <!-- <namespace>test_cam</namespace> -->
              <!-- <remapping>image_raw:=image_demo</remapping> -->
              <!-- <remapping>camera_info:=camera_info_demo</remapping> -->
            </ros>
            <!-- camera_name>omit so it defaults to sensor name</camera_name-->
            <!-- frame_name>omit so it defaults to link name</frameName-->
            <!-- <hack_baseline>0.07</hack_baseline> -->
          </plugin>
      </sensor>
    </link>
    
    <link name="camera_rgb_optical_left_frame">
      <inertial>
        <pose>0.076 0.1 0.093 0 0 0.175</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.001</iyy>
          <iyz>0.000</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>0.035</mass>
      </inertial>

      <pose>0.076 0.1 0.093 0 0 0.175</pose>
      <sensor name="camera_left" type="camera">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>30</update_rate>
        <camera name="picam">
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
              <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                  That pixel's noise value is added to each of its color
                  channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
          <plugin name="camera_driver_left" filename="libgazebo_ros_camera.so">
            <ros>
              <!-- <namespace>test_cam</namespace> -->
              <!-- <remapping>image_raw:=image_demo</remapping> -->
              <!-- <remapping>camera_info:=camera_info_demo</remapping> -->
            </ros>
            <!-- camera_name>omit so it defaults to sensor name</camera_name-->
            <!-- frame_name>omit so it defaults to link name</frameName-->
            <!-- <hack_baseline>0.07</hack_baseline> -->
          </plugin>
      </sensor>
    </link>

    <link name="camera_rgb_optical_right_frame">
      <inertial>
        <pose>0.076 -0.1 0.093 0 0 -0.175</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.001</iyy>
          <iyz>0.000</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>0.035</mass>
      </inertial>

      <pose>0.076 -0.1 0.093 0 0 -0.175</pose>
      <sensor name="camera_right" type="camera">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>30</update_rate>
        <camera name="picam">
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
              <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                  That pixel's noise value is added to each of its color
                  channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
          <plugin name="camera_driver_right" filename="libgazebo_ros_camera.so">
            <ros>
              <!-- <namespace>test_cam</namespace> -->
              <!-- <remapping>image_raw:=image_demo</remapping> -->
              <!-- <remapping>camera_info:=camera_info_demo</remapping> -->
            </ros>
            <!-- camera_name>omit so it defaults to sensor name</camera_name-->
            <!-- frame_name>omit so it defaults to link name</frameName-->
            <!-- <hack_baseline>0.07</hack_baseline> -->
          </plugin>
      </sensor>
    </link>    

    <joint name="base_joint" type="fixed">
      <parent>base_footprint</parent>
      <child>base_link</child>
      <pose>0.0 0.0 0.0 0 0 0</pose>
    </joint>

    <joint name="left_wheel_joint" type="revolute">
      <parent>base_link</parent>
      <child>left_wheel</child>
      <pose>-0.15 0.15 -0.05 -1.57 0 0</pose>
      <!-- <pose>0.0 0.0 0.0 -1.57 0 0</pose> -->
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="right_wheel_joint" type="revolute">
      <parent>base_link</parent>
      <child>right_wheel</child>
      <pose>-0.15 -0.15 -0.05 -1.57 0 0</pose>
      <!-- <pose>0.0 0.0 0.0 -1.57 0 0</pose> -->
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name='caster_back_right_joint' type='ball'>
      <parent>base_link</parent>
      <child>caster_back_right_link</child>
    </joint>

    <joint name='caster_back_left_joint' type='ball'>
      <parent>base_link</parent>
      <child>caster_back_left_link</child>
    </joint>

    <!-- <joint name="imu_joint" type="fixed">
      <parent>base_link</parent>
      <child>imu_link</child>
      <pose>-0.032 0 0.068 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>     -->

    <joint name="hokuyo_joint" type="fixed">
      <parent>base_link</parent>
      <child>hokuyo_link</child>
      <pose>0.25 0 0.1 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="camera_joint" type="fixed">
      <parent>base_link</parent>
      <child>camera_link</child>
      <pose>0.073 -0.011 0.565 0 0.524 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="camera_rgb_joint" type="fixed">
      <parent>camera_link</parent>
      <child>camera_rgb_optical_frame</child>
      <pose>0.003 0.011 0.009 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="camera_rgb_left_joint" type="fixed">
      <parent>camera_link</parent>
      <child>camera_rgb_optical_left_frame</child>
      <pose>0.003 0.111 0.009 0 0 0.175</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="camera_rgb_right_joint" type="fixed">
      <parent>camera_link</parent>
      <child>camera_rgb_optical_right_frame</child>
      <pose>0.003 -0.089 0.009 0 0 -0.175</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <plugin name="gamma_diff_drive" filename="libgazebo_ros_diff_drive.so">

      <ros>
        <!-- <namespace>/tb3</namespace> -->
      </ros>

      <update_rate>30</update_rate>

      <!-- wheels -->
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.4615</wheel_separation>
      <wheel_diameter>0.145</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <command_topic>cmd_vel</command_topic>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>

      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>

    </plugin>

    <plugin name="gamma_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <!-- <namespace>/tb3</namespace> -->
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>left_wheel_joint</joint_name>
      <joint_name>right_wheel_joint</joint_name>
    </plugin>    

  </model>
</sdf>
